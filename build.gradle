buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
//        flatDir dirs: '/Users/victor/Development/proguard5.2.1/lib'
//        flatDir dirs: '/Users/victor/Development/weaponlib-1.12.2/build/libs'
    }
    dependencies {
        classpath 'com.anatawa12.forge:ForgeGradle:2.3-1.0.7'
//       classpath ':proguard:'
//        classpath ':weaponlib:1.0'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "0.4.6.2"
group= "com.vicmatskiv.mw" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mw_2.0"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "1.12.2-14.23.0.2491"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
     mappings = "snapshot_20170624"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

//    compile files('/Users/victor/Development/weaponlib-1.12.2/build/libs/weaponlib-1.0.jar')

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    duplicatesStrategy = 'include'

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.mod_version
    }

    from ('src/main/java') {
        include '**/*.png'

        include '**/*.json'

        include '**/*.vsh'

        include '**/*.fsh'
    }
}

sourceJar {
    // Weird should not be needed at all, but something in Weapon Lib seems to be duplicated or something.
    // Doing this works just fine so it will be good enough for now.
    // For future reference or if anyone want to take a guess:
    // Execution failed for task ':sourceJar'.
    // > Entry com/paneedah/weaponlib/model/CameraModel.java is a duplicate but no duplicate handling strategy has been set. Please refer to https://docs.gradle.org/7.6/dsl/org.gradle.api.tasks.Copy.html#org.gradle.api.tasks.Copy:duplicatesStrategy for details.
    duplicatesStrategy = 'include'
}

jar {
    manifest.attributes([
            'ModSide': 'BOTH',
            'FMLCorePlugin': 'com.paneedah.weaponlib.core.WeaponlibCorePlugin',
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true'
    ])
}


//task obfuscate(type: proguard.gradle.ProGuardTask) {
//  configuration 'proguard.cfg'
//
//  injars "./build/libs/${archivesBaseName}-${version}.jar"
//
//  outjars "./build/libs/${archivesBaseName}-${version}_mc${project.minecraft.version}.jar"
//}
